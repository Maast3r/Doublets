import java.io.File;
import java.io.FileNotFoundException;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.Set;


public class Links
{
	HashMap<String, Set<String>> dictionary = new HashMap<String, Set<String>>();
	String alphabet = "abcdefghijklmnopqrstuvwxyz";
	int alphabetSize = alphabet.length();
	
	public Links(String fileName)
	{
		populateList(fileName);
	}
	
	public void populateList(String fileName)
	{
		File file = new File(fileName);
		try
		{
			Scanner scan = new Scanner(file);
			while(scan.hasNextLine())
			{
				String word = scan.nextLine().toLowerCase();
//				int hashCode = word.hashCode();
//				if(hashCode < 0)
//				{
//					hashCode += Integer.MAX_VALUE;
//				}
				this.dictionary.put(word, addCandidates(word));
			}
		}
		catch (FileNotFoundException e)
		{
			// no file
			e.printStackTrace();
		}
	}
	
	public Set<String> addCandidates(String word)
	{
		Set<String> candidateSet = new HashSet<String>();
		int wordSize = word.length();
		int i = 0;
		while(i < wordSize)
		{
			for(int j = 0; j< alphabetSize; j++){
				String temp = word;
				char letter = alphabet.charAt(j);
				tempReplace(temp,i,letter);
			}
		}
		return candidateSet;
	}
	
	

	private void tempReplace(String temp, int i, char letter)
	{
		String newString = "";
		int size = temp.length();
		newString += temp.substring(0, i-1);
		newString += letter;
		newString += temp.substring(i+1, size);
	}

	public Set<String> getCandidates(String string)
	{
		if(!dictionary.containsValue(string))
		{
			System.out.println("The string is not in the dictionary.");
			throw new NoSuchElementException();
		}
		return dictionary.get(string);
	}
}
